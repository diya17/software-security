import os
import shutil
import pandas as pd
from sklearn.preprocessing import MultiLabelBinarizer
import xml.etree.ElementTree as ET
import sklearn.svm
import sklearn.cluster
import sklearn.linear_model
import sklearn.model_selection
import sklearn.tree
import lightgbm
import numpy

def parseAndDecompileApks(filePath,chdirectory):
    apkTool = "C:/Users/ajayavel/apktool.jar"
    for fileName in os.listdir(filePath):
        curFilePath = os.path.join(filePath, fileName)
        os.chdir(chdirectory)
        if curFilePath.endswith('.apk'):
            os.system("java -jar " + apkTool + " d " + curFilePath)

parseAndDecompileApks('C:/Users/ajayavel/Downloads/malware','C:/Users/ajayavel/Downloads/extractedmalware')
parseAndDecompileApks('C:/Users/ajayavel/Downloads/benign','C:/Users/ajayavel/Downloads/extractedbenign')

def parseAndGetAndroidManifest(directoryPath, outputPath):
    for directory in os.listdir(directoryPath):
        try:
          if directory == '.DS_Store':
            continue
          inputFilePath = '/'+directory+'/AndroidManifest.xml'
          outputFileName = '/'+directory+'_AndroidManifest.xml'
        
          if(os.path.exists(directoryPath+inputFilePath)):
            shutil.copyfile(directoryPath+inputFilePath, outputPath+outputFileName)
        except:
          os.remove(outputPath+outputFileName)
          print("Removing path")
parseAndGetAndroidManifest('C:/Users/ajayavel/Downloads/extractedmalware', 'C:/Users/ajayavel/Downloads/extractedmanifestmalign')
parseAndGetAndroidManifest('C:/Users/ajayavel/Downloads/extractedbenign', 'C:/Users/ajayavel/Downloads/extractedmanifestbenign')

def calculatefscore(expected,actual):
  TP=0
  FP=0
  FN=0
  TN=0
  for i in range(len(expected)):
    if actual[i]>=1 and expected[i]==1:
      TP=TP+1
    elif actual[i]==1 and expected[i]==0:
      FP=FP+1
    elif actual[i]==0 and expected[i]==1:
      FN=FN+1
    

  fscore=2*TP/(2*TP+FP+FN)
  print(TP,FP,FN)
  return(fscore)

def predict(model,trainSet,trainRes,testSet):
  model.fit(trainSet,trainRes)
  predictions=model.predict(testSet)
  return(predictions)

malPermissionsMap = pd.DataFrame(columns=['AppName', 'Permissions'])

mal_dir = "C:/Users/ajayavel/Downloads/extractedmanifestmalign"
for fileName in os.listdir(mal_dir):
  if fileName == '.DS_Store':
    continue
  androidManifest = ET.parse(mal_dir+'/'+fileName)
  appName = fileName[:len(fileName)-20]
  permissionsList = []
  for permission in androidManifest.findall('uses-permission'):
    permissionsList.append(permission.attrib['{http://schemas.android.com/apk/res/android}name'])
  malPermissionsMap.loc[len(malPermissionsMap.index)] = [appName, permissionsList]

multiLableBinarizer = MultiLabelBinarizer(sparse_output=True)
malPermissionsMap = malPermissionsMap.join(pd.DataFrame.sparse.from_spmatrix(multiLableBinarizer.fit_transform(malPermissionsMap.pop('Permissions')),index=malPermissionsMap.index,columns=multiLableBinarizer.classes_))

benPermissionsMap = pd.DataFrame(columns=['AppName', 'Permissions'])

ben_dir = "C:/Users/ajayavel/Downloads/extractedmanifestbenign"
for fileName in os.listdir(ben_dir):
  if fileName == '.DS_Store':
    continue
  androidManifest = ET.parse(ben_dir+'/'+fileName)
  appName = fileName[:len(fileName)-20]
  permissionsList = []
  for permission in androidManifest.findall('uses-permission'):
    permissionsList.append(permission.attrib['{http://schemas.android.com/apk/res/android}name'])
  benPermissionsMap.loc[len(benPermissionsMap.index)] = [appName, permissionsList]

multiLableBinarizer = MultiLabelBinarizer(sparse_output=True)
benPermissionsMap = benPermissionsMap.join(pd.DataFrame.sparse.from_spmatrix(multiLableBinarizer.fit_transform(benPermissionsMap.pop('Permissions')),index=benPermissionsMap.index,columns=multiLableBinarizer.classes_))

for column in malPermissionsMap:
  if column not in benPermissionsMap:
    benPermissionsMap[column]=[0 for i in range(len(benPermissionsMap['AppName']))]

for columns in benPermissionsMap:
  if columns not in malPermissionsMap:
    malPermissionsMap[columns]=[0 for i in range(len(malPermissionsMap['AppName']))]

benPermissionsMap = benPermissionsMap.drop('AppName', axis=1)

benPermissionsMapNew=benPermissionsMap.to_numpy()
isBenign=numpy.array([1 for i in range(benPermissionsMap.shape[0])])


malPermissionsMap = malPermissionsMap.drop('AppName', axis=1)

malPermissionsMapNew=malPermissionsMap.to_numpy()
isMalign=numpy.array([0 for i in range(malPermissionsMap.shape[0])])


trainben,testben,trainbres,testbres = sklearn.model_selection.train_test_split(benPermissionsMapNew,isBenign)
trainmal,testmal,trainmres,testmres = sklearn.model_selection.train_test_split(malPermissionsMapNew,isMalign)
print(len(testben),len(testmal))

trainSet=numpy.concatenate((trainben,trainmal))
testSet=numpy.concatenate((testben,testmal))
trainRes=numpy.concatenate((trainbres,trainmres))
testRes=numpy.concatenate((testbres,testmres))


model1=sklearn.svm.SVC()
model2=lightgbm.LGBMClassifier()
model3=sklearn.linear_model.LinearRegression()
model5=sklearn.tree.DecisionTreeClassifier()
model4=sklearn.cluster.KMeans()




predictions1=predict(model1,trainSet,trainRes,testSet)
predictions2=predict(model2,trainSet,trainRes,testSet)
predictions3=predict(model3,trainSet,trainRes,testSet)
predictions4=predict(model4,trainSet,trainRes,testSet)


print("SVM")
fscore=calculatefscore(testRes,predictions1)
print(fscore)

print("Light GBM Classifier")
fscore1=calculatefscore(testRes,predictions2)
print(fscore1)

print("Linear Regression")
fscore2=calculatefscore(testRes,predictions3)
print(fscore2)

print("Kmeans")
fscore3=calculatefscore(testRes,predictions4)
print(fscore3)