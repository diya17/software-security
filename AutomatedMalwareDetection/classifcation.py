import os
import shutil
import pandas as pd
from sklearn.preprocessing import MultiLabelBinarizer
import xml.etree.ElementTree as ET
import sklearn.svm
import sklearn.cluster
import sklearn.linear_model
import sklearn.model_selection
import sklearn.tree
import lightgbm
import numpy
import sklearn.metrics

def parseAndDecompileApks(filePath,chdirectory):
    apkTool = "C:/Users/ajayavel/apktool.jar"
    for fileName in os.listdir(filePath):
        curFilePath = os.path.join(filePath, fileName)
        os.chdir(chdirectory)
        if curFilePath.endswith('.apk'):
            os.system("java -jar " + apkTool + " d " + curFilePath)


def parseAndGetAndroidManifest(directoryPath, outputPath):
    for directory in os.listdir(directoryPath):
        if directory == '.DS_Store':
            continue
        inputFilePath = '/'+directory+'/AndroidManifest.xml'
        outputFileName = '/'+directory+'_AndroidManifest.xml'
        if(os.path.exists(directoryPath+inputFilePath)):
          shutil.copyfile(directoryPath+inputFilePath, outputPath+outputFileName)

def calculatefscore(expected,actual):
  TP=0
  FP=0
  FN=0
  TN=0
  for i in range(len(expected)):
    if actual[i]>=1 and expected[i]==1:
      TP=TP+1
    elif actual[i]==1 and expected[i]==0:
      FP=FP+1
    elif actual[i]==0 and expected[i]==1:
      FN=FN+1
    

  fscore=2*TP/(2*TP+FP+FN)
  print(TP,FP,FN)
  return(fscore)

def predict(model,trainSet,trainRes,testSet):
  model.fit(trainSet,trainRes)
  predictions=model.predict(testSet)
  return(predictions)


parseAndDecompileApks('C:/Users/ajayavel/Downloads/malware','C:/Users/ajayavel/Downloads/extractedmalware')
parseAndDecompileApks('C:/Users/ajayavel/Downloads/benign','C:/Users/ajayavel/Downloads/extractedbenign')
parseAndGetAndroidManifest('C:/Users/ajayavel/Downloads/extractedmalware', 'C:/Users/ajayavel/Downloads/extractedmanifestmalign')
parseAndGetAndroidManifest('C:/Users/ajayavel/Downloads/extractedbenign', 'C:/Users/ajayavel/Downloads/extractedmanifestbenign')

malPermissionsMap = pd.DataFrame(columns=['AppName', 'Permissions','isBenign'])

mal_dir = "C:/Users/ajayavel/Downloads/extractedmanifestmalign"
for fileName in os.listdir(mal_dir):
  if fileName == '.DS_Store':
    continue
  androidManifest = ET.parse(mal_dir+'/'+fileName)
  appName = fileName[:len(fileName)-20]
  permissionsList = []
  for permission in androidManifest.findall('uses-permission'):
    permissionsList.append(permission.attrib['{http://schemas.android.com/apk/res/android}name'])
  malPermissionsMap.loc[len(malPermissionsMap.index)] = [appName, permissionsList,0]

benPermissionsMap = pd.DataFrame(columns=['AppName', 'Permissions','isBenign'])

ben_dir = "C:/Users/ajayavel/Downloads/extractedmanifestbenign"
for fileName in os.listdir(ben_dir):
  if fileName == '.DS_Store':
    continue
  androidManifest = ET.parse(ben_dir+'/'+fileName)
  appName = fileName[:len(fileName)-20]
  permissionsList = []
  for permission in androidManifest.findall('uses-permission'):
    permissionsList.append(permission.attrib['{http://schemas.android.com/apk/res/android}name'])
  for permission in androidManifest.findall('application service'):
    print(permission)
    permissionsList.append(permission.attrib['{http://schemas.android.com/apk/res/android}name'])
  benPermissionsMap.loc[len(benPermissionsMap.index)] = [appName, permissionsList,1]
permissionsMap=pd.concat([benPermissionsMap,malPermissionsMap],ignore_index=True)


multiLableBinarizer = MultiLabelBinarizer(sparse_output=True)
permissionsMap = permissionsMap.join(pd.DataFrame.sparse.from_spmatrix(multiLableBinarizer.fit_transform(permissionsMap.pop('Permissions')),index=permissionsMap.index,columns=multiLableBinarizer.classes_))
permissionsMap = permissionsMap.drop('AppName', axis=1)
isBen=permissionsMap.isBenign
permissionsMap = permissionsMap.drop('isBenign', axis=1)
permissionsMap=permissionsMap.to_numpy()
isBen=isBen.to_numpy()

trainSet,testSet,trainRes,testRes = sklearn.model_selection.train_test_split(permissionsMap,isBen)
print(trainSet)
print(permissionsMap)


model1=sklearn.svm.SVC()
model2=lightgbm.LGBMClassifier()
model3=sklearn.tree.DecisionTreeClassifier()
model4=sklearn.cluster.KMeans()




predictions1=predict(model1,trainSet,trainRes,testSet)
predictions2=predict(model2,trainSet,trainRes,testSet)
predictions3=predict(model3,trainSet,trainRes,testSet)
predictions4=predict(model4,trainSet,trainRes,testSet)


print("SVM")
fscore=calculatefscore(testRes,predictions1)
print(fscore)
fscore=sklearn.metrics.f1_score(testRes,predictions1)
print(fscore)

print("Light GBM Classifier")
fscore1=calculatefscore(testRes,predictions2)
print(fscore1)
fscore1=sklearn.metrics.f1_score(testRes,predictions2)
print(fscore1)

print("Decision Tree")
fscore2=calculatefscore(testRes,predictions3)
print(fscore2)



print("Kmeans")
fscore3=calculatefscore(testRes,predictions4)
print(fscore3)
